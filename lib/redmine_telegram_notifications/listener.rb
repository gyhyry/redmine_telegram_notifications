module RedmineTelegramNotifications
  class Listener < Redmine::Hook::Listener
    def controller_issues_new_after_save(context = {})
      issue = context[:issue]
      return unless should_notify?(issue)
      
      message = build_issue_message(issue)
      send_telegram_message(message)
      
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      send_attachments(issue) if issue.attachments.any?
    end

    def controller_issues_edit_after_save(context = {})
      issue = context[:issue]
      journal = context[:journal]
      return unless should_notify?(issue)
      
      message = build_journal_message(issue, journal)
      send_telegram_message(message)
      
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      new_attachments = journal.details.select { |d| d.property == 'attachment' }
      send_attachments(issue, new_attachments) if new_attachments.any?
    end

    private

    def convert_markup(text)
      return '' if text.blank?
      
      # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ
      lines = text.split("\n").map do |line|
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
        line = line.gsub(/\*\*(.+?)\*\*/, '<b>\1</b>')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—É—Ä—Å–∏–≤–∞ (—É—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã)
        line = line.gsub(/\*(.+?)\*/, '<i>\1</i>')
        line = line.gsub(/_(.+?)_/, '<i>\1</i>')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞—á–µ—Ä–∫–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        line = line.gsub(/~~(.+?)~~/, '<s>\1</s>')
        line = line.gsub(/-(.+?)-/, '<s>\1</s>')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–¥–∞
        line = line.gsub(/`(.+?)`/, '<code>\1</code>')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫
        line = line.gsub(/\[(.+?)\]\((.+?)\)/, '<a href="\2">\1</a>')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö HTML-—Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        line = CGI.escapeHTML(line) unless line.include?('<b>') || 
                                          line.include?('<i>') || 
                                          line.include?('<s>') || 
                                          line.include?('<code>') || 
                                          line.include?('<a')
        
        line
      end
      
      # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
      lines.join("\n")
    end

    def build_issue_message(issue)
      message = []
      message << "üÜï <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞</b>"
      message << "<b>–ü—Ä–æ–µ–∫—Ç:</b> #{issue.project.name}"
      message << "#{issue.tracker.name} ##{issue.id}: <a href=\"#{issue_url(issue)}\">#{issue.subject}</a>"
      message << "<b>–°—Ç–∞—Ç—É—Å:</b> #{issue.status.name}"
      message << "<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> #{issue.priority.name}"
      message << "<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∞:</b> #{issue.assigned_to&.name || '-'}"
      message << "<b>–ê–≤—Ç–æ—Ä:</b> #{issue.author.name}"
      
      if issue.description.present?
        message << "\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>"
        description_lines = convert_markup(issue.description).split("\n")
        message.concat(description_lines)
      end
      
      if issue.attachments.any?
        message << "\n<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>"
        issue.attachments.each do |attachment|
          message << "üìé #{attachment.filename} (#{number_to_human_size(attachment.filesize)})"
        end
      end
      
      message.join("\n")
    end

    def build_journal_message(issue, journal)
      message = []
      message << "üìù <b>–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>"
      message << "<b>–ü—Ä–æ–µ–∫—Ç:</b> #{issue.project.name}"
      message << "#{issue.tracker.name} ##{issue.id}: <a href=\"#{issue_url(issue)}\">#{issue.subject}</a>"
      
      if journal.details.any?
        message << "\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>"
        journal.details.each do |detail|
          if detail.property == 'attachment'
            message << "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: <b>#{detail.value}</b>"
          else
            old_value = detail.old_value.present? ? detail.old_value : "–ø—É—Å—Ç–æ"
            new_value = detail.value.present? ? detail.value : "–ø—É—Å—Ç–æ"
            message << "‚Ä¢ <b>#{detail.prop_key}:</b> #{old_value} ‚Üí <b>#{new_value}</b>"
          end
        end
      end
      
      if journal.notes.present?
        message << "\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>"
        comment_lines = convert_markup(journal.notes).split("\n")
        message.concat(comment_lines)
      end
      
      message << "\n<b>–û–±–Ω–æ–≤–∏–ª:</b> #{journal.user.name}"
      message.join("\n")
    end

    def send_attachments(issue, attachments = nil)
      settings = Setting.plugin_redmine_telegram_notifications
      token = settings['telegram_bot_token']
      chat_id = settings['telegram_chat_id']
      
      attachments_to_send = attachments ? 
        attachments.map { |d| issue.attachments.find_by_id(d.prop_key) } :
        issue.attachments
      
      attachments_to_send.compact.each do |attachment|
        begin
          file_path = attachment.diskfile
          if File.exist?(file_path)
            Telegram::Bot::Client.run(token) do |bot|
              bot.api.send_document(
                chat_id: chat_id,
                document: Faraday::UploadIO.new(file_path, attachment.content_type),
                caption: "#{issue.tracker.name} ##{issue.id}: #{attachment.filename}"
              )
            end
          end
        rescue => e
          Rails.logger.error "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram: #{e.message}"
        end
      end
    end

    def number_to_human_size(size)
      if size < 1024
        "#{size} B"
      elsif size < 1024*1024
        "#{(size.to_f/1024).round(1)} KB"
      elsif size < 1024*1024*1024
        "#{(size.to_f/1024/1024).round(1)} MB"
      else
        "#{(size.to_f/1024/1024/1024).round(1)} GB"
      end
    end

    def should_notify?(issue)
      settings = Setting.plugin_redmine_telegram_notifications
      return false if settings['telegram_bot_token'].blank?
      return false if settings['telegram_chat_id'].blank?
      
      projects = settings['projects'] || []
      projects.include?(issue.project_id.to_s)
    end

    def send_telegram_message(message)
      settings = Setting.plugin_redmine_telegram_notifications
      token = settings['telegram_bot_token']
      chat_id = settings['telegram_chat_id']

      begin
        Telegram::Bot::Client.run(token) do |bot|
          bot.api.send_message(
            chat_id: chat_id,
            text: message,
            parse_mode: 'HTML',
            disable_web_page_preview: true
          )
        end
      rescue => e
        Rails.logger.error "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: #{e.message}"
      end
    end

    def issue_url(issue)
      "#{Setting.protocol}://#{Setting.host_name}/issues/#{issue.id}"
    end
  end
end 